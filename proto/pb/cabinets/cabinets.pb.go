// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cabinets.proto

/*
Package cabinets is a generated protocol buffer package.

It is generated from these files:
	cabinets.proto

It has these top-level messages:
	UploadRequest
	FileRequest
	FileInfo
*/
package cabinets

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 文件类型 图片/头像/普通文件
type FileType int32

const (
	FileType_IMAGE  FileType = 0
	FileType_AVATAR FileType = 1
	FileType_FILE   FileType = 2
)

var FileType_name = map[int32]string{
	0: "IMAGE",
	1: "AVATAR",
	2: "FILE",
}
var FileType_value = map[string]int32{
	"IMAGE":  0,
	"AVATAR": 1,
	"FILE":   2,
}

func (x FileType) String() string {
	return proto.EnumName(FileType_name, int32(x))
}
func (FileType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 文件上传参数
type UploadRequest struct {
	Id    string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Ex    string   `protobuf:"bytes,2,opt,name=ex" json:"ex,omitempty"`
	Typef FileType `protobuf:"varint,3,opt,name=typef,enum=cabinets.FileType" json:"typef,omitempty"`
	Data  []byte   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *UploadRequest) Reset()                    { *m = UploadRequest{} }
func (m *UploadRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadRequest) ProtoMessage()               {}
func (*UploadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UploadRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UploadRequest) GetEx() string {
	if m != nil {
		return m.Ex
	}
	return ""
}

func (m *UploadRequest) GetTypef() FileType {
	if m != nil {
		return m.Typef
	}
	return FileType_IMAGE
}

func (m *UploadRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 根据文件id拉取文件信息的参数
type FileRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *FileRequest) Reset()                    { *m = FileRequest{} }
func (m *FileRequest) String() string            { return proto.CompactTextString(m) }
func (*FileRequest) ProtoMessage()               {}
func (*FileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FileRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// 文件信息
type FileInfo struct {
	Id     string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Ex     string   `protobuf:"bytes,2,opt,name=ex" json:"ex,omitempty"`
	Typef  FileType `protobuf:"varint,3,opt,name=typef,enum=cabinets.FileType" json:"typef,omitempty"`
	Width  int32    `protobuf:"varint,4,opt,name=width" json:"width,omitempty"`
	Height int32    `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	Size   int64    `protobuf:"varint,6,opt,name=size" json:"size,omitempty"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FileInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FileInfo) GetEx() string {
	if m != nil {
		return m.Ex
	}
	return ""
}

func (m *FileInfo) GetTypef() FileType {
	if m != nil {
		return m.Typef
	}
	return FileType_IMAGE
}

func (m *FileInfo) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *FileInfo) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *FileInfo) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func init() {
	proto.RegisterType((*UploadRequest)(nil), "cabinets.UploadRequest")
	proto.RegisterType((*FileRequest)(nil), "cabinets.FileRequest")
	proto.RegisterType((*FileInfo)(nil), "cabinets.FileInfo")
	proto.RegisterEnum("cabinets.FileType", FileType_name, FileType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cabinets service

type CabinetsClient interface {
	// 文件上传
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*FileInfo, error)
	// 获取文件信息
	GetFileInfo(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileInfo, error)
}

type cabinetsClient struct {
	cc *grpc.ClientConn
}

func NewCabinetsClient(cc *grpc.ClientConn) CabinetsClient {
	return &cabinetsClient{cc}
}

func (c *cabinetsClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/cabinets.Cabinets/Upload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cabinetsClient) GetFileInfo(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/cabinets.Cabinets/GetFileInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cabinets service

type CabinetsServer interface {
	// 文件上传
	Upload(context.Context, *UploadRequest) (*FileInfo, error)
	// 获取文件信息
	GetFileInfo(context.Context, *FileRequest) (*FileInfo, error)
}

func RegisterCabinetsServer(s *grpc.Server, srv CabinetsServer) {
	s.RegisterService(&_Cabinets_serviceDesc, srv)
}

func _Cabinets_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetsServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cabinets.Cabinets/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetsServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cabinets_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CabinetsServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cabinets.Cabinets/GetFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CabinetsServer).GetFileInfo(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cabinets_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cabinets.Cabinets",
	HandlerType: (*CabinetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _Cabinets_Upload_Handler,
		},
		{
			MethodName: "GetFileInfo",
			Handler:    _Cabinets_GetFileInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cabinets.proto",
}

func init() { proto.RegisterFile("cabinets.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0x87, 0xbb, 0x69, 0x12, 0xd2, 0xe9, 0xfb, 0x86, 0x30, 0xf8, 0x67, 0x11, 0x84, 0x90, 0x53,
	0x50, 0xe8, 0xa1, 0x1e, 0x04, 0x6f, 0x41, 0xda, 0x12, 0xd0, 0xcb, 0x52, 0xbd, 0xa7, 0x66, 0x6a,
	0x16, 0x6a, 0x13, 0xcd, 0x8a, 0xad, 0x17, 0xbf, 0x85, 0x9f, 0x57, 0x76, 0xb7, 0x56, 0x2a, 0xe8,
	0xc9, 0xdb, 0x3c, 0xbb, 0xb3, 0xb3, 0xcf, 0xfe, 0x16, 0xc2, 0xbb, 0x62, 0x26, 0x97, 0xa4, 0xda,
	0x41, 0xf3, 0x54, 0xab, 0x1a, 0x83, 0x4f, 0x4e, 0x1e, 0xe0, 0xff, 0x4d, 0xb3, 0xa8, 0x8b, 0x52,
	0xd0, 0xe3, 0x33, 0xb5, 0x0a, 0x43, 0x70, 0x64, 0xc9, 0x59, 0xcc, 0xd2, 0x9e, 0x70, 0x64, 0xa9,
	0x99, 0x56, 0xdc, 0xb1, 0x4c, 0x2b, 0x4c, 0xc1, 0x53, 0xeb, 0x86, 0xe6, 0xbc, 0x1b, 0xb3, 0x34,
	0x1c, 0xe2, 0x60, 0x3b, 0x7a, 0x2c, 0x17, 0x34, 0x5d, 0x37, 0x24, 0x6c, 0x03, 0x22, 0xb8, 0x65,
	0xa1, 0x0a, 0xee, 0xc6, 0x2c, 0xfd, 0x27, 0x4c, 0x9d, 0x1c, 0x43, 0x5f, 0xb7, 0xfd, 0x70, 0x59,
	0xf2, 0xce, 0x20, 0xd0, 0xfb, 0xf9, 0x72, 0x5e, 0xff, 0xa1, 0xc9, 0x1e, 0x78, 0x2f, 0xb2, 0x54,
	0x95, 0x51, 0xf1, 0x84, 0x05, 0x3c, 0x00, 0xbf, 0x22, 0x79, 0x5f, 0x29, 0xee, 0x99, 0xe5, 0x0d,
	0x69, 0xef, 0x56, 0xbe, 0x12, 0xf7, 0x63, 0x96, 0x76, 0x85, 0xa9, 0x4f, 0x4e, 0xad, 0x97, 0x1e,
	0x8a, 0x3d, 0xf0, 0xf2, 0xeb, 0x6c, 0x32, 0x8a, 0x3a, 0x08, 0xe0, 0x67, 0xb7, 0xd9, 0x34, 0x13,
	0x11, 0xc3, 0x00, 0xdc, 0x71, 0x7e, 0x35, 0x8a, 0x9c, 0xe1, 0x1b, 0x04, 0x97, 0x1b, 0x15, 0x3c,
	0x07, 0xdf, 0xe6, 0x8b, 0x87, 0x5f, 0x7e, 0x3b, 0x89, 0x1f, 0x7d, 0x13, 0xd7, 0x6f, 0x4f, 0x3a,
	0x78, 0x01, 0xfd, 0x09, 0xa9, 0x6d, 0x18, 0xfb, 0xbb, 0x4d, 0xbf, 0x9e, 0x9d, 0xf9, 0xe6, 0x97,
	0xcf, 0x3e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x96, 0x86, 0xa0, 0x70, 0xf7, 0x01, 0x00, 0x00,
}
