// Code generated by MockGen. DO NOT EDIT.
// Source: a.com/go-server/service/board/internal/cache (interfaces: Cache)

// Package mock is a generated GoMock package.
package mock

import (
	model "a.com/go-server/service/board/internal/model"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCache is a mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// DelComment mocks base method
func (m *MockCache) DelComment(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelComment indicates an expected call of DelComment
func (mr *MockCacheMockRecorder) DelComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelComment", reflect.TypeOf((*MockCache)(nil).DelComment), arg0, arg1, arg2)
}

// DelSummary mocks base method
func (m *MockCache) DelSummary(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelSummary", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelSummary indicates an expected call of DelSummary
func (mr *MockCacheMockRecorder) DelSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelSummary", reflect.TypeOf((*MockCache)(nil).DelSummary), arg0, arg1)
}

// DelUserCommLikes mocks base method
func (m *MockCache) DelUserCommLikes(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelUserCommLikes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelUserCommLikes indicates an expected call of DelUserCommLikes
func (mr *MockCacheMockRecorder) DelUserCommLikes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelUserCommLikes", reflect.TypeOf((*MockCache)(nil).DelUserCommLikes), arg0, arg1)
}

// DelUserLikes mocks base method
func (m *MockCache) DelUserLikes(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelUserLikes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelUserLikes indicates an expected call of DelUserLikes
func (mr *MockCacheMockRecorder) DelUserLikes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelUserLikes", reflect.TypeOf((*MockCache)(nil).DelUserLikes), arg0, arg1)
}

// GetComment mocks base method
func (m *MockCache) GetComment(arg0 context.Context, arg1, arg2 string) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment
func (mr *MockCacheMockRecorder) GetComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockCache)(nil).GetComment), arg0, arg1, arg2)
}

// GetComments mocks base method
func (m *MockCache) GetComments(arg0 context.Context, arg1 string, arg2 []string) (model.Comments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.Comments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments
func (mr *MockCacheMockRecorder) GetComments(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockCache)(nil).GetComments), arg0, arg1, arg2)
}

// GetSummaries mocks base method
func (m *MockCache) GetSummaries(arg0 context.Context, arg1 []string) (model.Summaries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummaries", arg0, arg1)
	ret0, _ := ret[0].(model.Summaries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummaries indicates an expected call of GetSummaries
func (mr *MockCacheMockRecorder) GetSummaries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummaries", reflect.TypeOf((*MockCache)(nil).GetSummaries), arg0, arg1)
}

// InitComments mocks base method
func (m *MockCache) InitComments(arg0 context.Context, arg1, arg2 string, arg3 model.Comments, arg4 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitComments", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitComments indicates an expected call of InitComments
func (mr *MockCacheMockRecorder) InitComments(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitComments", reflect.TypeOf((*MockCache)(nil).InitComments), arg0, arg1, arg2, arg3, arg4)
}

// ListUserCommLikes mocks base method
func (m *MockCache) ListUserCommLikes(arg0 context.Context, arg1 string) (model.CommentLikes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserCommLikes", arg0, arg1)
	ret0, _ := ret[0].(model.CommentLikes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserCommLikes indicates an expected call of ListUserCommLikes
func (mr *MockCacheMockRecorder) ListUserCommLikes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserCommLikes", reflect.TypeOf((*MockCache)(nil).ListUserCommLikes), arg0, arg1)
}

// ListUserLikes mocks base method
func (m *MockCache) ListUserLikes(arg0 context.Context, arg1 string) (model.Likes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserLikes", arg0, arg1)
	ret0, _ := ret[0].(model.Likes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserLikes indicates an expected call of ListUserLikes
func (mr *MockCacheMockRecorder) ListUserLikes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserLikes", reflect.TypeOf((*MockCache)(nil).ListUserLikes), arg0, arg1)
}

// NewSummary mocks base method
func (m *MockCache) NewSummary(arg0 context.Context, arg1 *model.Summary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSummary", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewSummary indicates an expected call of NewSummary
func (mr *MockCacheMockRecorder) NewSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSummary", reflect.TypeOf((*MockCache)(nil).NewSummary), arg0, arg1)
}

// NewUserCommLikes mocks base method
func (m *MockCache) NewUserCommLikes(arg0 context.Context, arg1 string, arg2 model.CommentLikes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserCommLikes", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewUserCommLikes indicates an expected call of NewUserCommLikes
func (mr *MockCacheMockRecorder) NewUserCommLikes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserCommLikes", reflect.TypeOf((*MockCache)(nil).NewUserCommLikes), arg0, arg1, arg2)
}

// NewUserLikes mocks base method
func (m *MockCache) NewUserLikes(arg0 context.Context, arg1 string, arg2 model.Likes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserLikes", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewUserLikes indicates an expected call of NewUserLikes
func (mr *MockCacheMockRecorder) NewUserLikes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserLikes", reflect.TypeOf((*MockCache)(nil).NewUserLikes), arg0, arg1, arg2)
}

// PopComment mocks base method
func (m *MockCache) PopComment(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PopComment indicates an expected call of PopComment
func (mr *MockCacheMockRecorder) PopComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopComment", reflect.TypeOf((*MockCache)(nil).PopComment), arg0, arg1, arg2, arg3)
}

// PushComment mocks base method
func (m *MockCache) PushComment(arg0 context.Context, arg1 *model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushComment indicates an expected call of PushComment
func (mr *MockCacheMockRecorder) PushComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushComment", reflect.TypeOf((*MockCache)(nil).PushComment), arg0, arg1)
}

// RangeComments mocks base method
func (m *MockCache) RangeComments(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeComments", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeComments indicates an expected call of RangeComments
func (mr *MockCacheMockRecorder) RangeComments(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeComments", reflect.TypeOf((*MockCache)(nil).RangeComments), arg0, arg1, arg2, arg3, arg4)
}

// SetComment mocks base method
func (m *MockCache) SetComment(arg0 context.Context, arg1 *model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetComment indicates an expected call of SetComment
func (mr *MockCacheMockRecorder) SetComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetComment", reflect.TypeOf((*MockCache)(nil).SetComment), arg0, arg1)
}
