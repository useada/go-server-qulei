// Code generated by MockGen. DO NOT EDIT.
// Source: a.com/go-server/service/board/internal/store (interfaces: Store)

// Package mock is a generated GoMock package.
package mock

import (
	model "a.com/go-server/service/board/internal/model"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DecrCommLike mocks base method
func (m *MockStore) DecrCommLike(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrCommLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrCommLike indicates an expected call of DecrCommLike
func (mr *MockStoreMockRecorder) DecrCommLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrCommLike", reflect.TypeOf((*MockStore)(nil).DecrCommLike), arg0, arg1)
}

// DecrCommReply mocks base method
func (m *MockStore) DecrCommReply(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrCommReply", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrCommReply indicates an expected call of DecrCommReply
func (mr *MockStoreMockRecorder) DecrCommReply(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrCommReply", reflect.TypeOf((*MockStore)(nil).DecrCommReply), arg0, arg1, arg2)
}

// DecrSummaryComm mocks base method
func (m *MockStore) DecrSummaryComm(arg0 context.Context, arg1, arg2 string, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrSummaryComm", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrSummaryComm indicates an expected call of DecrSummaryComm
func (mr *MockStoreMockRecorder) DecrSummaryComm(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrSummaryComm", reflect.TypeOf((*MockStore)(nil).DecrSummaryComm), arg0, arg1, arg2, arg3)
}

// DecrSummaryLike mocks base method
func (m *MockStore) DecrSummaryLike(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrSummaryLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrSummaryLike indicates an expected call of DecrSummaryLike
func (mr *MockStoreMockRecorder) DecrSummaryLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrSummaryLike", reflect.TypeOf((*MockStore)(nil).DecrSummaryLike), arg0, arg1)
}

// DecrSummaryRepost mocks base method
func (m *MockStore) DecrSummaryRepost(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrSummaryRepost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrSummaryRepost indicates an expected call of DecrSummaryRepost
func (mr *MockStoreMockRecorder) DecrSummaryRepost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrSummaryRepost", reflect.TypeOf((*MockStore)(nil).DecrSummaryRepost), arg0, arg1)
}

// DelCommLike mocks base method
func (m *MockStore) DelCommLike(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelCommLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelCommLike indicates an expected call of DelCommLike
func (mr *MockStoreMockRecorder) DelCommLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelCommLike", reflect.TypeOf((*MockStore)(nil).DelCommLike), arg0, arg1)
}

// DelComment mocks base method
func (m *MockStore) DelComment(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelComment indicates an expected call of DelComment
func (mr *MockStoreMockRecorder) DelComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelComment", reflect.TypeOf((*MockStore)(nil).DelComment), arg0, arg1)
}

// DelLike mocks base method
func (m *MockStore) DelLike(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelLike indicates an expected call of DelLike
func (mr *MockStoreMockRecorder) DelLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelLike", reflect.TypeOf((*MockStore)(nil).DelLike), arg0, arg1)
}

// GetComment mocks base method
func (m *MockStore) GetComment(arg0 context.Context, arg1 string) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", arg0, arg1)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment
func (mr *MockStoreMockRecorder) GetComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockStore)(nil).GetComment), arg0, arg1)
}

// GetComments mocks base method
func (m *MockStore) GetComments(arg0 context.Context, arg1 []string) (model.Comments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", arg0, arg1)
	ret0, _ := ret[0].(model.Comments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments
func (mr *MockStoreMockRecorder) GetComments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockStore)(nil).GetComments), arg0, arg1)
}

// GetLike mocks base method
func (m *MockStore) GetLike(arg0 context.Context, arg1 string) (*model.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLike", arg0, arg1)
	ret0, _ := ret[0].(*model.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLike indicates an expected call of GetLike
func (mr *MockStoreMockRecorder) GetLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLike", reflect.TypeOf((*MockStore)(nil).GetLike), arg0, arg1)
}

// GetSummaries mocks base method
func (m *MockStore) GetSummaries(arg0 context.Context, arg1 []string) (model.Summaries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummaries", arg0, arg1)
	ret0, _ := ret[0].(model.Summaries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummaries indicates an expected call of GetSummaries
func (mr *MockStoreMockRecorder) GetSummaries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummaries", reflect.TypeOf((*MockStore)(nil).GetSummaries), arg0, arg1)
}

// GetSummary mocks base method
func (m *MockStore) GetSummary(arg0 context.Context, arg1 string) (*model.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummary", arg0, arg1)
	ret0, _ := ret[0].(*model.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummary indicates an expected call of GetSummary
func (mr *MockStoreMockRecorder) GetSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummary", reflect.TypeOf((*MockStore)(nil).GetSummary), arg0, arg1)
}

// IncrCommLike mocks base method
func (m *MockStore) IncrCommLike(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrCommLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrCommLike indicates an expected call of IncrCommLike
func (mr *MockStoreMockRecorder) IncrCommLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrCommLike", reflect.TypeOf((*MockStore)(nil).IncrCommLike), arg0, arg1)
}

// IncrCommReply mocks base method
func (m *MockStore) IncrCommReply(arg0 context.Context, arg1 string, arg2 *model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrCommReply", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrCommReply indicates an expected call of IncrCommReply
func (mr *MockStoreMockRecorder) IncrCommReply(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrCommReply", reflect.TypeOf((*MockStore)(nil).IncrCommReply), arg0, arg1, arg2)
}

// IncrSummaryComm mocks base method
func (m *MockStore) IncrSummaryComm(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrSummaryComm", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrSummaryComm indicates an expected call of IncrSummaryComm
func (mr *MockStoreMockRecorder) IncrSummaryComm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrSummaryComm", reflect.TypeOf((*MockStore)(nil).IncrSummaryComm), arg0, arg1, arg2)
}

// IncrSummaryLike mocks base method
func (m *MockStore) IncrSummaryLike(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrSummaryLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrSummaryLike indicates an expected call of IncrSummaryLike
func (mr *MockStoreMockRecorder) IncrSummaryLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrSummaryLike", reflect.TypeOf((*MockStore)(nil).IncrSummaryLike), arg0, arg1)
}

// IncrSummaryRepost mocks base method
func (m *MockStore) IncrSummaryRepost(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrSummaryRepost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrSummaryRepost indicates an expected call of IncrSummaryRepost
func (mr *MockStoreMockRecorder) IncrSummaryRepost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrSummaryRepost", reflect.TypeOf((*MockStore)(nil).IncrSummaryRepost), arg0, arg1)
}

// ListComments mocks base method
func (m *MockStore) ListComments(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 int) (model.Comments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComments", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(model.Comments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComments indicates an expected call of ListComments
func (mr *MockStoreMockRecorder) ListComments(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockStore)(nil).ListComments), arg0, arg1, arg2, arg3, arg4)
}

// ListLikes mocks base method
func (m *MockStore) ListLikes(arg0 context.Context, arg1 string, arg2 int64, arg3 int) (model.Likes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLikes", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(model.Likes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLikes indicates an expected call of ListLikes
func (mr *MockStoreMockRecorder) ListLikes(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLikes", reflect.TypeOf((*MockStore)(nil).ListLikes), arg0, arg1, arg2, arg3)
}

// ListUserCommLikes mocks base method
func (m *MockStore) ListUserCommLikes(arg0 context.Context, arg1, arg2 string) (model.CommentLikes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserCommLikes", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.CommentLikes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserCommLikes indicates an expected call of ListUserCommLikes
func (mr *MockStoreMockRecorder) ListUserCommLikes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserCommLikes", reflect.TypeOf((*MockStore)(nil).ListUserCommLikes), arg0, arg1, arg2)
}

// ListUserLikes mocks base method
func (m *MockStore) ListUserLikes(arg0 context.Context, arg1 string) (model.Likes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserLikes", arg0, arg1)
	ret0, _ := ret[0].(model.Likes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserLikes indicates an expected call of ListUserLikes
func (mr *MockStoreMockRecorder) ListUserLikes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserLikes", reflect.TypeOf((*MockStore)(nil).ListUserLikes), arg0, arg1)
}

// NewCommLike mocks base method
func (m *MockStore) NewCommLike(arg0 context.Context, arg1 *model.CommentLike) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCommLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewCommLike indicates an expected call of NewCommLike
func (mr *MockStoreMockRecorder) NewCommLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCommLike", reflect.TypeOf((*MockStore)(nil).NewCommLike), arg0, arg1)
}

// NewComment mocks base method
func (m *MockStore) NewComment(arg0 context.Context, arg1 *model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewComment indicates an expected call of NewComment
func (mr *MockStoreMockRecorder) NewComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewComment", reflect.TypeOf((*MockStore)(nil).NewComment), arg0, arg1)
}

// NewLike mocks base method
func (m *MockStore) NewLike(arg0 context.Context, arg1 *model.Like) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewLike indicates an expected call of NewLike
func (mr *MockStoreMockRecorder) NewLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewLike", reflect.TypeOf((*MockStore)(nil).NewLike), arg0, arg1)
}
